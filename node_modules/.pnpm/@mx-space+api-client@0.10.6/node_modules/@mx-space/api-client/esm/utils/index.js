export const isPlainObject = (obj) => isObject(obj) &&
    Object.prototype.toString.call(obj) === '[object Object]' &&
    Object.getPrototypeOf(obj) === Object.prototype;
export const sortOrderToNumber = (order) => {
    return ({
        asc: 1,
        desc: -1,
    }[order] || 1);
};
const isObject = (obj) => obj && typeof obj === 'object';
export const destructureData = (payload) => {
    if (typeof payload !== 'object') {
        return payload;
    }
    if (payload === null) {
        return payload;
    }
    const data = payload.data;
    const dataIsPlainObject = isPlainObject(data);
    if (dataIsPlainObject && Object.keys(payload).length === 1) {
        const d = Object.assign({}, data);
        // attach raw onto new data
        attachRawFromOneToAnthor(payload, d);
        return d;
    }
    return payload;
};
export const attachRawFromOneToAnthor = (from, to) => {
    if (!from || !isObject(to)) {
        return;
    }
    from.$raw &&
        Object.defineProperty(to, '$raw', {
            value: { ...from.$raw },
            enumerable: false,
        });
    from.$request &&
        Object.defineProperty(to, '$request', {
            value: { ...from.$request },
            enumerable: false,
        });
};
//# sourceMappingURL=index.js.map