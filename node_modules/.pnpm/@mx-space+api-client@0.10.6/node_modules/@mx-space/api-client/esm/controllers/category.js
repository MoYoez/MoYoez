import { attachRawFromOneToAnthor, destructureData } from '../utils';
import { autoBind } from '../utils/auto-bind';
import { RequestError } from '../core/error';
import { CategoryType } from '../models/category';
export class CategoryController {
    constructor(client) {
        this.client = client;
        this.name = 'category';
        this.base = 'categories';
        autoBind(this);
    }
    get proxy() {
        return this.client.proxy(this.base);
    }
    getAllCategories() {
        return this.proxy.get({
            params: {
                type: CategoryType.Category,
            },
        });
    }
    getAllTags() {
        return this.proxy.get({
            params: {
                type: CategoryType.Tag,
            },
        });
    }
    async getCategoryDetail(ids) {
        if (typeof ids === 'string') {
            const data = await this.proxy.get({
                params: {
                    ids,
                },
            });
            const result = Object.values(data.entries)[0];
            attachRawFromOneToAnthor(data, result);
            return result;
        }
        else if (Array.isArray(ids)) {
            const data = await this.proxy.get({
                params: {
                    ids: ids.join(','),
                },
            });
            const entries = data?.entries;
            if (!entries) {
                throw new RequestError('data structure error', 500, data.$request.path, data);
            }
            const map = new Map(Object.entries(entries).map(([id, value]) => [id.toLowerCase(), value]));
            attachRawFromOneToAnthor(data, map);
            return map;
        }
    }
    async getCategoryByIdOrSlug(idOrSlug) {
        const res = await this.proxy(idOrSlug).get();
        return destructureData(res);
    }
    async getTagByName(name) {
        const res = await this.proxy(name).get({
            params: {
                tag: 1,
            },
        });
        return res;
    }
}
//# sourceMappingURL=category.js.map