import type { IRequestAdapter } from '../interfaces/adapter';
import type { IController } from '../interfaces/controller';
import type { IRequestHandler, RequestProxyResult } from '../interfaces/request';
import type { SelectFields } from '../interfaces/types';
import type { PaginateResult } from '../models/base';
import type { NoteModel, NoteWrappedPayload } from '../models/note';
import type { HTTPClient } from '../core/client';
import type { SortOptions } from './base';
declare module '../core/client' {
    interface HTTPClient<T extends IRequestAdapter = IRequestAdapter, ResponseWrapper = unknown> {
        note: NoteController<ResponseWrapper>;
    }
}
export declare type NoteListOptions = {
    select?: SelectFields<keyof NoteModel>;
    year?: number;
    sortBy?: 'weather' | 'mood' | 'title' | 'created' | 'modified';
    sortOrder?: 1 | -1;
};
export declare class NoteController<ResponseWrapper> implements IController {
    private client;
    base: string;
    name: string;
    constructor(client: HTTPClient);
    get proxy(): IRequestHandler<ResponseWrapper>;
    /**
     * 最新日记
     */
    getLatest(): RequestProxyResult<NoteWrappedPayload, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: NoteWrappedPayload;
    } : ResponseWrapper extends {
        data: NoteWrappedPayload;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: NoteWrappedPayload;
    }>;
    /**
     * 获取一篇日记, 根据 Id 查询需要鉴权
     * @param id id | nid
     * @param password 访问密码
     */
    getNoteById(id: string): Promise<RequestProxyResult<NoteModel, ResponseWrapper>>;
    getNoteById(id: number): Promise<NoteWrappedPayload>;
    getNoteById(id: number, password: string): Promise<NoteWrappedPayload>;
    getNoteById(id: number, password: undefined, singleResult: true): Promise<RequestProxyResult<NoteModel, ResponseWrapper>>;
    getNoteById(id: number, password: string, singleResult: true): Promise<RequestProxyResult<NoteModel, ResponseWrapper>>;
    /**
     * 日记列表分页
     */
    getList(page?: number, perPage?: number, options?: NoteListOptions): RequestProxyResult<PaginateResult<NoteModel>, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: PaginateResult<NoteModel>;
    } : ResponseWrapper extends {
        data: PaginateResult<NoteModel>;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: PaginateResult<NoteModel>;
    }>;
    /**
     * 获取当前日记的上下各 n / 2 篇日记
     */
    getMiddleList(id: string, size?: number): RequestProxyResult<{
        data: Pick<NoteModel, 'id' | 'title' | 'nid' | 'created'>[];
        size: number;
    }, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: {
            data: Pick<NoteModel, 'id' | 'title' | 'nid' | 'created'>[];
            size: number;
        };
    } : ResponseWrapper extends {
        data: {
            data: Pick<NoteModel, 'id' | 'title' | 'nid' | 'created'>[];
            size: number;
        };
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: {
            data: Pick<NoteModel, 'id' | 'title' | 'nid' | 'created'>[];
            size: number;
        };
    }>;
    /**
     * 喜欢这篇日记
     */
    likeIt(id: string | number): RequestProxyResult<never, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: never;
    } : ResponseWrapper extends {
        data: never;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: never;
    }>;
    /**
     * 获取专栏内的所有日记
     */
    getNoteByTopicId(topicId: string, page?: number, size?: number, sortOptions?: SortOptions): RequestProxyResult<PaginateResult<NoteModel>, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: PaginateResult<NoteModel>;
    } : ResponseWrapper extends {
        data: PaginateResult<NoteModel>;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: PaginateResult<NoteModel>;
    }>;
}
