import type { IRequestAdapter } from '../interfaces/adapter';
import type { IController } from '../interfaces/controller';
import type { IRequestHandler, RequestProxyResult, ResponseProxyExtraRaw } from '../interfaces/request';
import type { HTTPClient } from '../core/client';
import type { CategoryModel, CategoryWithChildrenModel, TagModel } from '../models/category';
import { CategoryType } from '../models/category';
import type { PostModel } from '../models/post';
declare module '../core/client' {
    interface HTTPClient<T extends IRequestAdapter = IRequestAdapter, ResponseWrapper = unknown> {
        category: CategoryController<ResponseWrapper>;
    }
}
export declare class CategoryController<ResponseWrapper> implements IController {
    private client;
    name: string;
    base: string;
    constructor(client: HTTPClient);
    get proxy(): IRequestHandler<ResponseWrapper>;
    getAllCategories(): RequestProxyResult<{
        data: CategoryModel[];
    }, ResponseWrapper>;
    getAllTags(): RequestProxyResult<{
        data: TagModel[];
    }, ResponseWrapper>;
    getCategoryDetail(id: string): Promise<ResponseProxyExtraRaw<CategoryWithChildrenModel>>;
    getCategoryDetail(ids: string[]): Promise<ResponseProxyExtraRaw<Map<string, CategoryWithChildrenModel>>>;
    getCategoryByIdOrSlug(idOrSlug: string): Promise<CategoryModel & {
        children: Pick<PostModel, "id" | "title" | "slug" | "modified" | "created">[];
    } & {
        $raw: ResponseWrapper extends {
            data: infer T;
        } ? ResponseWrapper : ResponseWrapper extends unknown ? {
            [i: string]: any;
            data: (ResponseWrapper extends unknown ? {
                [key: string]: any;
                data: CategoryWithChildrenModel;
            } : ResponseWrapper extends {
                data: CategoryWithChildrenModel;
            } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
                data: CategoryWithChildrenModel;
            }) extends unknown ? {
                type: CategoryType;
                count: number;
                slug: string;
                name: string;
                created: string;
                id: string;
                children: Pick<PostModel, "id" | "title" | "slug" | "modified" | "created">[];
            } : ResponseWrapper extends unknown ? {
                [key: string]: any;
                data: CategoryWithChildrenModel;
            } : ResponseWrapper extends {
                data: CategoryWithChildrenModel;
            } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
                data: CategoryWithChildrenModel;
            };
        } : ResponseWrapper;
        $request: {
            [k: string]: string;
            path: string;
            method: string;
        };
    }>;
    getTagByName(name: string): Promise<{
        tag: string;
        data: Pick<PostModel, 'id' | 'title' | 'slug' | 'category' | 'created'>[];
    } & {
        $raw: ResponseWrapper extends {
            data: infer T;
        } ? ResponseWrapper : ResponseWrapper extends unknown ? {
            [i: string]: any;
            data: (ResponseWrapper extends unknown ? {
                [key: string]: any;
                data: {
                    tag: string;
                    data: Pick<PostModel, 'id' | 'title' | 'slug' | 'category' | 'created'>[];
                };
            } : ResponseWrapper extends {
                data: {
                    tag: string;
                    data: Pick<PostModel, 'id' | 'title' | 'slug' | 'category' | 'created'>[];
                };
            } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
                data: {
                    tag: string;
                    data: Pick<PostModel, 'id' | 'title' | 'slug' | 'category' | 'created'>[];
                };
            }) extends unknown ? {
                tag: string;
                data: Pick<PostModel, "id" | "title" | "slug" | "created" | "category">[];
            } : ResponseWrapper extends unknown ? {
                [key: string]: any;
                data: {
                    tag: string;
                    data: Pick<PostModel, 'id' | 'title' | 'slug' | 'category' | 'created'>[];
                };
            } : ResponseWrapper extends {
                data: {
                    tag: string;
                    data: Pick<PostModel, 'id' | 'title' | 'slug' | 'category' | 'created'>[];
                };
            } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
                data: {
                    tag: string;
                    data: Pick<PostModel, 'id' | 'title' | 'slug' | 'category' | 'created'>[];
                };
            };
        } : ResponseWrapper;
        $request: {
            [k: string]: string;
            path: string;
            method: string;
        };
    }>;
}
