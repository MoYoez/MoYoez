import type { IRequestAdapter } from '../interfaces/adapter';
import type { IController } from '../interfaces/controller';
import type { IRequestHandler } from '../interfaces/request';
import type { HTTPClient } from '../core';
declare module '../core/client' {
    interface HTTPClient<T extends IRequestAdapter = IRequestAdapter, ResponseWrapper = unknown> {
        serverless: ServerlessController<ResponseWrapper>;
    }
}
export declare class ServerlessController<ResponseWrapper> implements IController {
    protected client: HTTPClient;
    base: string;
    name: string;
    constructor(client: HTTPClient);
    get proxy(): IRequestHandler<ResponseWrapper>;
    getByReferenceAndName<T = unknown>(reference: string, name: string): import("../interfaces/request").RequestProxyResult<T, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: T;
    } : ResponseWrapper extends {
        data: T;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: T;
    }>;
}
