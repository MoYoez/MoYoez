import type { IRequestAdapter } from '../interfaces/adapter';
import type { IController } from '../interfaces/controller';
import type { IRequestHandler } from '../interfaces/request';
import type { SelectFields } from '../interfaces/types';
import type { PaginateResult } from '../models/base';
import type { PageModel } from '../models/page';
import type { HTTPClient } from '../core';
declare module '../core/client' {
    interface HTTPClient<T extends IRequestAdapter = IRequestAdapter, ResponseWrapper = unknown> {
        page: PageController<ResponseWrapper>;
    }
}
export declare type PageListOptions = {
    select?: SelectFields<keyof PageModel>;
    sortBy?: 'order' | 'subtitle' | 'title' | 'created' | 'modified';
    sortOrder?: 1 | -1;
};
export declare class PageController<ResponseWrapper> implements IController {
    private readonly client;
    constructor(client: HTTPClient);
    base: string;
    name: string;
    get proxy(): IRequestHandler<ResponseWrapper>;
    /**
     * 页面列表
     */
    getList(page?: number, perPage?: number, options?: PageListOptions): import("../interfaces/request").RequestProxyResult<PaginateResult<PageModel>, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: PaginateResult<PageModel>;
    } : ResponseWrapper extends {
        data: PaginateResult<PageModel>;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: PaginateResult<PageModel>;
    }>;
    /**
     * 页面详情
     */
    getById(id: string): import("../interfaces/request").RequestProxyResult<PageModel, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: PageModel;
    } : ResponseWrapper extends {
        data: PageModel;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: PageModel;
    }>;
    /**
     * 根据路径获取页面
     * @param slug 路径
     * @returns
     */
    getBySlug(slug: string): import("../interfaces/request").RequestProxyResult<PageModel, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: PageModel;
    } : ResponseWrapper extends {
        data: PageModel;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: PageModel;
    }>;
}
