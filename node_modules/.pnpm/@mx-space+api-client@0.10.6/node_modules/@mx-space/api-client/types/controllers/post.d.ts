import type { IRequestAdapter } from '../interfaces/adapter';
import type { IController } from '../interfaces/controller';
import type { IRequestHandler, RequestProxyResult } from '../interfaces/request';
import type { SelectFields } from '../interfaces/types';
import type { PaginateResult } from '../models/base';
import type { PostModel } from '../models/post';
import type { HTTPClient } from '../core/client';
declare module '../core/client' {
    interface HTTPClient<T extends IRequestAdapter = IRequestAdapter, ResponseWrapper = unknown> {
        post: PostController<ResponseWrapper>;
    }
}
export declare type PostListOptions = {
    select?: SelectFields<keyof PostModel>;
    year?: number;
    sortBy?: 'categoryId' | 'title' | 'created' | 'modified';
    sortOrder?: 1 | -1;
};
export declare class PostController<ResponseWrapper> implements IController {
    private client;
    constructor(client: HTTPClient);
    base: string;
    name: string;
    get proxy(): IRequestHandler<ResponseWrapper>;
    /**
     * 获取文章列表分页
     * @param page
     * @param perPage
     * @returns
     */
    getList(page?: number, perPage?: number, options?: PostListOptions): RequestProxyResult<PaginateResult<PostModel>, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: PaginateResult<PostModel>;
    } : ResponseWrapper extends {
        data: PaginateResult<PostModel>;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: PaginateResult<PostModel>;
    }>;
    /**
     * 根据分类和路径查找文章
     * @param categoryName
     * @param slug
     */
    getPost(categoryName: string, slug: string): RequestProxyResult<PostModel, ResponseWrapper>;
    /**
     * 根据 ID 查找文章
     * @param id
     */
    getPost(id: string): RequestProxyResult<PostModel, ResponseWrapper>;
    /**
     * 获取最新的文章
     */
    getLatest(): RequestProxyResult<PostModel, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: PostModel;
    } : ResponseWrapper extends {
        data: PostModel;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: PostModel;
    }>;
    /**
     * 点赞
     */
    thumbsUp(id: string): RequestProxyResult<void, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: void;
    } : ResponseWrapper extends {
        data: void;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: void;
    }>;
}
