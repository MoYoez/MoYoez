import type { IRequestAdapter } from '../interfaces/adapter';
import type { IController } from '../interfaces/controller';
import type { IRequestHandler } from '../interfaces/request';
import type { TLogin, UserModel } from '../models/user';
import type { HTTPClient } from '../core';
declare module '../core/client' {
    interface HTTPClient<T extends IRequestAdapter = IRequestAdapter, ResponseWrapper = unknown> {
        user: UserController<ResponseWrapper>;
        master: UserController<ResponseWrapper>;
    }
}
export declare class UserController<ResponseWrapper> implements IController {
    private readonly client;
    constructor(client: HTTPClient);
    base: string;
    name: string[];
    get proxy(): IRequestHandler<ResponseWrapper>;
    getMasterInfo(): import("../interfaces/request").RequestProxyResult<UserModel, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: UserModel;
    } : ResponseWrapper extends {
        data: UserModel;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: UserModel;
    }>;
    login(username: string, password: string): import("../interfaces/request").RequestProxyResult<TLogin, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: TLogin;
    } : ResponseWrapper extends {
        data: TLogin;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: TLogin;
    }>;
    checkTokenValid(token: string): import("../interfaces/request").RequestProxyResult<{
        ok: number;
        isGuest: boolean;
    }, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: {
            ok: number;
            isGuest: boolean;
        };
    } : ResponseWrapper extends {
        data: {
            ok: number;
            isGuest: boolean;
        };
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: {
            ok: number;
            isGuest: boolean;
        };
    }>;
}
