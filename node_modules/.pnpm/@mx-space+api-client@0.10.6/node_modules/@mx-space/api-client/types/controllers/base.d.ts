import type { IRequestHandler, RequestProxyResult } from '../interfaces/request';
import type { PaginateResult } from '../models/base';
import type { HTTPClient } from '../core';
export declare type SortOptions = {
    sortBy?: string;
    sortOrder?: 1 | -1 | 'asc' | 'desc';
};
export declare abstract class BaseCrudController<T, ResponseWrapper> {
    protected client: HTTPClient;
    base: string;
    constructor(client: HTTPClient);
    get proxy(): IRequestHandler<ResponseWrapper>;
    getById(id: string): RequestProxyResult<T, ResponseWrapper>;
    getAll(): RequestProxyResult<{
        data: T[];
    }, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: {
            data: T[];
        };
    } : ResponseWrapper extends {
        data: {
            data: T[];
        };
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: {
            data: T[];
        };
    }>;
    /**
     * 带分页的查询
     * @param page
     * @param perPage
     */
    getAllPaginated(page?: number, perPage?: number, sortOption?: SortOptions): RequestProxyResult<PaginateResult<T>, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: PaginateResult<T>;
    } : ResponseWrapper extends {
        data: PaginateResult<T>;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: PaginateResult<T>;
    }>;
}
