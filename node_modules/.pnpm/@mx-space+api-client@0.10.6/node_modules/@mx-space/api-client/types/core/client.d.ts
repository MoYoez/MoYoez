import type { IAdaptorRequestResponseType, IRequestAdapter } from '../interfaces/adapter';
import type { ClientOptions } from '../interfaces/client';
import type { IController } from '../interfaces/controller';
import type { IRequestHandler } from '../interfaces/request';
import type { Class } from '../interfaces/types';
export type { HTTPClient };
declare class HTTPClient<T extends IRequestAdapter = IRequestAdapter, ResponseWrapper = unknown> {
    private readonly _endpoint;
    private _adaptor;
    private options;
    private readonly _proxy;
    constructor(_endpoint: string, _adaptor: T, options?: Omit<ClientOptions, 'controllers'>);
    private initGetClient;
    injectControllers(...Controller: Class<IController>[]): void;
    injectControllers(Controller: Class<IController>[]): void;
    get endpoint(): string;
    get instance(): T;
    request(options: {
        url: string;
        method?: string;
        data?: any;
        params?: any;
    }): Promise<IAdaptorRequestResponseType<any>>;
    get proxy(): IRequestHandler<ResponseWrapper>;
    private buildRoute;
}
export declare function createClient<T extends IRequestAdapter>(adapter: T): <ResponseWrapper = T extends {
    responseWrapper: infer Type;
} ? Type extends undefined ? unknown : Type : unknown>(endpoint: string, options?: ClientOptions | undefined) => HTTPClient<T, ResponseWrapper>;
