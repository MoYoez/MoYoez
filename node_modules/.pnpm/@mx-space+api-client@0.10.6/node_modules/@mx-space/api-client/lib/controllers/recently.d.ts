import type { IRequestAdapter } from '../interfaces/adapter';
import type { IController } from '../interfaces/controller';
import type { IRequestHandler } from '../interfaces/request';
import type { RecentlyModel } from '../models/recently';
import type { HTTPClient } from '../core';
declare module '../core/client' {
    interface HTTPClient<T extends IRequestAdapter = IRequestAdapter, ResponseWrapper = unknown> {
        recently: RecentlyController<ResponseWrapper>;
        shorthand: RecentlyController<ResponseWrapper>;
    }
}
export declare class RecentlyController<ResponseWrapper> implements IController {
    private readonly client;
    base: string;
    name: string[];
    constructor(client: HTTPClient);
    get proxy(): IRequestHandler<ResponseWrapper>;
    /**
     * 获取最新一条
     */
    getLatestOne(): import("../interfaces/request").RequestProxyResult<RecentlyModel, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: RecentlyModel;
    } : ResponseWrapper extends {
        data: RecentlyModel;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: RecentlyModel;
    }>;
    getAll(): import("../interfaces/request").RequestProxyResult<{
        data: RecentlyModel[];
    }, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: {
            data: RecentlyModel[];
        };
    } : ResponseWrapper extends {
        data: {
            data: RecentlyModel[];
        };
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: {
            data: RecentlyModel[];
        };
    }>;
    getList(before?: string | undefined, after?: string | undefined, size?: number | number): import("../interfaces/request").RequestProxyResult<{
        data: RecentlyModel[];
    }, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: {
            data: RecentlyModel[];
        };
    } : ResponseWrapper extends {
        data: {
            data: RecentlyModel[];
        };
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: {
            data: RecentlyModel[];
        };
    }>;
}
