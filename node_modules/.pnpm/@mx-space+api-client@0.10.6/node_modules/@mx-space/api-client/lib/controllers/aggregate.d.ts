import type { IRequestAdapter } from '../interfaces/adapter';
import type { IController } from '../interfaces/controller';
import type { SortOrder } from '../interfaces/options';
import type { IRequestHandler, RequestProxyResult } from '../interfaces/request';
import type { AggregateRoot, AggregateStat, AggregateTop, TimelineData, TimelineType } from '../models/aggregate';
import type { HTTPClient } from '../core';
declare module '../core/client' {
    interface HTTPClient<T extends IRequestAdapter = IRequestAdapter, ResponseWrapper = unknown> {
        aggregate: AggregateController<ResponseWrapper>;
    }
}
export declare class AggregateController<ResponseWrapper> implements IController {
    private client;
    base: string;
    name: string;
    constructor(client: HTTPClient);
    get proxy(): IRequestHandler<ResponseWrapper>;
    /**
     * 获取聚合数据
     */
    getAggregateData(): RequestProxyResult<AggregateRoot, ResponseWrapper>;
    /**
     * 获取最新发布的内容
     */
    getTop(size?: number): RequestProxyResult<AggregateTop, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: AggregateTop;
    } : ResponseWrapper extends {
        data: AggregateTop;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: AggregateTop;
    }>;
    getTimeline(options?: {
        sort?: SortOrder;
        type?: TimelineType;
        year?: number;
    }): RequestProxyResult<{
        data: TimelineData;
    }, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: {
            data: TimelineData;
        };
    } : ResponseWrapper extends {
        data: {
            data: TimelineData;
        };
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: {
            data: TimelineData;
        };
    }>;
    /**
     * 获取聚合数据统计
     */
    getStat(): RequestProxyResult<AggregateStat, ResponseWrapper, ResponseWrapper extends unknown ? {
        [key: string]: any;
        data: AggregateStat;
    } : ResponseWrapper extends {
        data: AggregateStat;
    } ? ResponseWrapper : Omit<ResponseWrapper, "data"> & {
        data: AggregateStat;
    }>;
}
